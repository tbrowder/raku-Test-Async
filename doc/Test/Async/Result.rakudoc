=begin pod
=head1 NAME

C<Test::Async::Result> - test result representation


=head1 SYNOPSIS

=begin code :lang<raku>
self.proclaim:
    test-result( $condition,
                 fail => {
                     comments => "a comment about the cause of flunk",
                 });
=end code


=head1 DESCRIPTION

This class represents information about test outcomes.


=head1 ATTRIBUTES

=head2 C<Bool:D $.cond>

I<True> if test is considered success, I<False> otherwise. B<Note> that a skipped tests is a success.

=head2 C<$.fail-profile>, C<$.success-profile>

Profiles to be used to create a new C<Event::Test> object. Depending on C<$.cond> value either C<success-> or
C<fail-profile> is used. The most typical use of this is to add comments explaining the test outcome.

A profile attribute can be made lazy if set to a code object:

=begin code :lang<raku>
my $tr = test-result($condition, fail => -> { comments => self.expected-got($expected, $got) });
=end code

In this case C<event-profile> method will invoke the code and use the return value as profile itself. This improves
performance in cases when profile keys are set using some rather heavy code (like the C<expected-got> method in the
example above) but eventually might not even be used after all.

=head1 METHODS

=head2 C<event-profile(--> Hash:D)>

Returns a profile in accordance to C<$.cond> value.

The profile capture is built the following way:

=item if corresponding profile attribute is code then the code is invoked and return value is used
=item profile is coerced into a hash

=head1 SEE ALSO

=item C<test-result> routine from L<C<Test::Async::Utils>|rakudoc:Test::Async::Utils>.
=item L<C<Test::Async>|rakudoc:Test::Async>
=item L<C<INDEX>|rakudoc:..::INDEX>

=head1 COPYRIGHT

(c) 2020-2023, Vadim Belman <vrurg@cpan.org>

=head1 LICENSE

Artistic License 2.0

See the L<I<LICENSE>|file:LICENSE> file in this distribution.


=end pod

